@page "/counter"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@using chat_app.Data
@****************Notification part***************@
<div id="noti_Container">
    <div class="ikrNoti_Counter">@currentUserMsgList.Count()</div>
    <div class="ikrNoti_Button" style="background: #2E467C;" @onclick="NotificationHideShow"></div>
    <div class="ikrNotifications" style="display: @BoxCss !important" @onclick="NotificationHideShow">
        <h3>Notifications (<span class="notificationCounterOnHead">@currentUserMsgList.Count()</span>)</h3>
        <div class="ikrNotificationItems">
            @foreach (var nmObj in currentUserMsgList)
            {
                <div class="ikrSingleNotiDiv" notiId="@nmObj.MsgId">
                    <h4 class="ikrNotiFormPropName">Sender:@nmObj.SenderName</h4>
                    <h5 class="ikrNotificationBody">@nmObj.MsgBody</h5>
                    <div class="ikrNotiCreateDate">@nmObj.MsgDateSt</div>

                </div>
            }
        </div>
        <div class="ikrSeeAll"><a href="#">See All</a></div>
    </div>

</div>
<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string userInput;
    private string messageInput;


    private List<NotificationMessage> allNotificationMsgs = new List<NotificationMessage>();
    private List<NotificationMessage> currentUserMsgList = new List<NotificationMessage>();
    private NotificationMessage notificationMesssage = new NotificationMessage();

    private HubConnection hupConnnection;
    private string BoxCss = "none";

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
           .WithUrl(NavigationManager.ToAbsoluteUri("/Chathub"))
           .Build();

        hubConnection.On<string, string>("ReceiveMessage2", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            allNotificationMsgs.Add(new NotificationMessage()
            {
                MsgId = allNotificationMsgs.Count() + 1,
                SenderName = user,
                MsgBody = message
            });
            currentUserMsgList = allNotificationMsgs.Where(x => x.SenderName != notificationMesssage.SenderName).ToList();
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }


    Task Send() =>
        hubConnection.SendAsync("SendMessage2", userInput, messageInput);

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
    private void NotificationHideShow()
    {
        if (BoxCss == "none") BoxCss = "block";
        else BoxCss = "none";
    }
}